name: Minikube-in-DinD Node App Deployment

on:
  push:
    branches: [ main ]

env:
  # Define your Docker Hub username here. This should be added as a GitHub Secret.
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_NAME: my-node-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ---------------------------------------------------------------------
      # 1. Build and Run DinD Container (The Kubernetes Host)
      # ---------------------------------------------------------------------

      - name: Build Minikube DinD Image
        # Assumes minikube-dind/Dockerfile exists and is configured to run Minikube
        run: docker build -t minikube-dind-node:latest -f minikube-dind/Dockerfile .
      
      - name: Run DinD Container and Stream Logs
        # --privileged is required to run Docker inside Docker (DinD)
        run: |
          docker run --privileged -d --name minikube-dind-node minikube-dind-node:latest
          # Stream logs in the background for debugging Minikube startup failures
          docker logs -f minikube-dind-node &
          
      - name: Wait for Minikube Cluster Readiness ⏳ (Syntax Fixed)
        run: |
          echo "Waiting for Minikube to start..."
          TIMEOUT=300
          START_TIME=$(date +%s)
          
          while ! docker exec minikube-dind-node kubectl get nodes > /dev/null 2>&1; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Minikube failed to start within $TIMEOUT seconds."
              exit 1
            fi
            
            echo "Minikube not ready yet. Waiting 5 seconds..."
            sleep 5
          done
          echo "Minikube is ready!"

      # ---------------------------------------------------------------------
      # 2. Build App Image and Push to Docker Hub
      # ---------------------------------------------------------------------

      - name: Build and Tag App Image
        # Image is initially built with a local tag
        run: |
          echo "Building Node.js application image..."
          docker build -t ${{ env.IMAGE_NAME }}:latest -f app/Dockerfile .

      - name: Login to Docker Hub and Push Image 🔑
        run: |
          echo "Logging into Docker Hub..."
          # Login using the GitHub Secrets (DOCKER_USERNAME and DOCKER_PASSWORD)
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ env.DOCKER_USERNAME }} --password-stdin
          
          # Tag the image with the repository name
          DOCKER_REPO_TAG=${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          echo "Tagging image as $DOCKER_REPO_TAG"
          docker tag ${{ env.IMAGE_NAME }}:latest $DOCKER_REPO_TAG
          
          # Push the image
          echo "Pushing image to Docker Hub..."
          docker push $DOCKER_REPO_TAG
          
          # IMPORTANT: Retain the original local tag for minikube loading compatibility
          docker tag $DOCKER_REPO_TAG ${{ env.IMAGE_NAME }}:latest

      - name: Load App Image into Minikube 💾
        # Uses the locally tagged image to load into the DinD environment
        run: |
          echo "Transferring image into minikube-dind-node container..."
          docker save ${{ env.IMAGE_NAME }}:latest | docker exec -i minikube-dind-node docker load

      # ---------------------------------------------------------------------
      # 3. Deploy to Kubernetes (Fixed .yml Extension)
      # ---------------------------------------------------------------------
      
      - name: Apply Kubernetes Manifest ✅
        run: |
          # --- DIAGNOSTIC STEP: Host Check ---
          echo "--- Host Runner File Check ---"
          ls -l k8s/ || (echo "ERROR: k8s directory or manifest not found on host." && exit 1)
          echo "----------------------------"
          
          # FIX: Pipe the file content directly into the container's shell
          echo "Piping manifest into DinD container..."
          # Source is .yml (from host) | Destination inside is also .yml (for consistency)
          cat k8s/deploy-node-app.yml | docker exec -i minikube-dind-node sh -c 'cat > /tmp/deploy-node-app.yml'
          
          # --- DEBUG STEP: Container Check (To confirm pipe success) ---
          echo "Verifying file presence inside container at destination..."
          # Checking for .yml file
          docker exec minikube-dind-node ls -l /tmp/deploy-node-app.yml || (echo "FATAL ERROR: Manifest pipe failed. File not found." && exit 1)

          # Run kubectl inside the Minikube container, referencing the file's internal path
          echo "Applying k8s deployment manifest..."
          # Applying the .yml file
          docker exec minikube-dind-node kubectl apply -f /tmp/deploy-node-app.yml
          
          echo "Verifying deployment status..."
          docker exec minikube-dind-node kubectl get pods -l app=node-app
          docker exec minikube-dind-node kubectl get services -l app=node-app
