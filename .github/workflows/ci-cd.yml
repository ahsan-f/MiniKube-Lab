name: CI/CD with Minikube, Docker Hub, and GitHub Actions

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_IMAGE_NAME: my-node-app
  # FIX: Concatenate the username secret with the static image name string directly
  DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}/my-node-app 

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì¶ Checkout Repository
      uses: actions/checkout@v4 # Updated to v4 for best practice

    # ----------------------------------------------------
    # --- 1. Build and Test Application ---
    # ----------------------------------------------------
    - name: üõ†Ô∏è Set up Docker BuildX
      uses: docker/setup-buildx-action@v3 # Updated to v3 for best practice

    - name: üèóÔ∏è Build Application Image
      run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest -f app/Dockerfile .

    - name: üß™ Run Application Tests
      run: |
        docker run --rm ${{ env.DOCKER_IMAGE_NAME }}:latest npm test

    # ----------------------------------------------------
    # --- 2. Minikube Deployment within DinD ---
    # ----------------------------------------------------
    - name: üê≥ Build Minikube-in-DinD Image
      run: docker build -t minikube-dind:latest -f minikube-dind/Dockerfile .

    - name: üöÄ Start Minikube-in-DinD Service and Wait for Kubernetes
      run: |
        # Start the DinD container
        docker run -d --privileged --name minikube-ci-env minikube-dind:latest
        
        # Wait for Minikube's Kubernetes API to be available inside the container
        echo "Waiting for Minikube Kubernetes API..."
        until docker exec minikube-ci-env kubectl get nodes >/dev/null 2>&1; do
          sleep 5
        done
        echo "Minikube Kubernetes API is ready and configured!"

    - name: üì§ Load Application Image into Minikube's Docker Daemon
      # This is crucial for using 'imagePullPolicy: Never'
      run: |
        # Save the application image to a tarball and stream it into the DinD container's Docker daemon
        docker save ${{ env.DOCKER_IMAGE_NAME }}:latest | docker exec -i minikube-ci-env docker load

    - name: üö¢ Deploy Application to Minikube
      run: |
        # 1. Create Deployment and Service YAML
        cat <<EOF > deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: my-node-app-deployment
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: my-node-app
          template:
            metadata:
              labels:
                app: my-node-app
            spec:
              containers:
              - name: my-node-app
                image: ${{ env.DOCKER_IMAGE_NAME }}:latest
                imagePullPolicy: Never 
                ports:
                - containerPort: 3000
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: my-node-app-service
        spec:
          selector:
            app: my-node-app
          ports:
            - protocol: TCP
              port: 80
              targetPort: 3000
          type: NodePort
        EOF
        
        # 2. Copy the YAML into the DinD container and apply it
        docker cp deployment.yaml minikube-ci-env:/tmp/deployment.yaml
        docker exec minikube-ci-env kubectl apply -f /tmp/deployment.yaml
        
        # 3. Verify deployment 
        docker exec minikube-ci-env kubectl rollout status deployment/my-node-app-deployment --timeout=5m

    # ----------------------------------------------------
    # --- 3. Push to Docker Hub ---
    # ----------------------------------------------------
    - name: üîë Log in to Docker Hub
      uses: docker/login-action@v3 # Updated to v3 for best practice
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: üè∑Ô∏è Tag and Push Application Image to Docker Hub
      run: |
        # Tag with the full repository path
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKER_REPO }}:latest
        docker push ${{ env.DOCKER_REPO }}:latest

    - name: üßπ Clean up Minikube-in-DinD container
      if: always() # Run even if previous steps fail
      run: docker stop minikube-ci-env && docker rm minikube-ci-env
# ^ This is the necessary 'run' command to execute the cleanup shell script.
